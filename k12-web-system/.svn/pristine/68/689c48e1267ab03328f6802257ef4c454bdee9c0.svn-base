package com.wdcloud.ueditor.fastdfs.service.impl;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.fileupload.disk.DiskFileItem;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.multipart.FilePart;
import org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;
import org.apache.commons.httpclient.methods.multipart.Part;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.baidu.ueditor.define.AppInfo;
import com.baidu.ueditor.define.BaseState;
import com.baidu.ueditor.define.State;
import com.wdcloud.ueditor.extend.ueditor.UeditorService;

@Service("ueditorService")
public class UeditorServiceFastdfsImpl implements UeditorService {

	protected Logger	logger	= LoggerFactory.getLogger(getClass());

	private String		file_upload;

	@Value("${wdcloud.boot.file.upload.path}")
	public void setFile_upload(String file_upload) {

		this.file_upload = file_upload;
	}

	@Override
	public MultipartFile getMultipartFile(String filedName, HttpServletRequest request) {

		MultipartHttpServletRequest multipartHttpservletRequest = (MultipartHttpServletRequest) request;
		MultipartFile resultFile = multipartHttpservletRequest.getFile(filedName);
		return resultFile;
	}

	@Override
	public State saveFileByInputStream(MultipartFile multipartFile, long maxSize) {

		State state = null;
		CommonsMultipartFile cf = (CommonsMultipartFile) multipartFile;
		DiskFileItem fi = (DiskFileItem) cf.getFileItem();
		File f = fi.getStoreLocation();
		PostMethod postMethod = new PostMethod(file_upload + "/upload");
		try {
			FilePart fp = new FilePart("files", f);
			Part[] parts = { fp };
			MultipartRequestEntity mre = new MultipartRequestEntity(parts,
					postMethod.getParams());
			postMethod.setRequestEntity(mre);

			HttpClient client = new HttpClient();
			// 由于要上传的文件可能比较大 , 因此在此设置最大的连接超时时间
			client.getHttpConnectionManager().getParams().setConnectionTimeout(50000);
			int status = client.executeMethod(postMethod);

			if (status == HttpStatus.SC_OK) {
				InputStream inputStream = postMethod.getResponseBodyAsStream();
				BufferedReader br = new BufferedReader(new InputStreamReader(
						inputStream));
				StringBuffer stringBuffer = new StringBuffer();
				String str = "";
				while ((str = br.readLine()) != null) {
					stringBuffer.append(str);
				}
				System.out.println(stringBuffer.toString());
			}

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			// 释放连接
			postMethod.releaseConnection();
		}

		// try {
		// if (multipartFile.getSize() > maxSize) {
		// return new BaseState(false, AppInfo.MAX_SIZE);
		// }
		//
		// PutRet putRet = QiniuUtil.uploadFileByInputStream(multipartFile);
		// if (putRet.ok()) {
		// state = new BaseState(true);
		// state.putInfo("size", multipartFile.getSize());
		// state.putInfo("title", multipartFile.getOriginalFilename());
		// state.putInfo("url", QiniuUtil.getBaseUrl() + "/" + putRet.getKey());
		//
		// // 把上传的文件信息记入数据库
		// // ---自行处理---
		// return state;
		// } else {
		// logger.error("文件上传失败，请检查配置参数是否正确！");
		// }
		// } catch (IOException e) {
		//
		// }
		return new BaseState(false, AppInfo.IO_ERROR);
	}

	@Override
	public State saveBinaryFile(byte[] data, String fileName) {

		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public State listFile(String[] allowFiles, int start, int pageSize) {

		// TODO Auto-generated method stub
		return null;
	}

	private void ssss(File file) {

	}
}
