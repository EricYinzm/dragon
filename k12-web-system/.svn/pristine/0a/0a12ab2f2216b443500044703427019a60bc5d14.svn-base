package com.wdcloud.ueditor.extend.ueditor;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import com.baidu.ueditor.define.ActionMap;
import com.baidu.ueditor.define.AppInfo;
import com.baidu.ueditor.define.BaseState;
import com.baidu.ueditor.define.State;

public class UeditorActionEnter {

	private HttpServletRequest		request			= null;

	private String					rootPath		= null;
	private String					contextPath		= null;

	private String					actionType		= null;

	private UeditorConfigManager	configManager	= null;

	private UeditorService			ueditorService	= null;

	public UeditorActionEnter(HttpServletRequest request, String rootPath, String ueditor_config_json,
			UeditorService ueditorService) {

		this.request = request;
		this.rootPath = rootPath;
		actionType = request.getParameter("action");
		contextPath = request.getContextPath();
		configManager = UeditorConfigManager.getInstance(this.rootPath, ueditor_config_json);

		this.ueditorService = ueditorService;

	}

	public String exec() {

		String callbackName = request.getParameter("callback");

		if (callbackName != null) {

			if (!validCallbackName(callbackName)) {
				return new BaseState(false, AppInfo.ILLEGAL).toJSONString();
			}

			return callbackName + "(" + invoke() + ");";

		} else {
			return invoke();
		}
	}

	public String invoke() {

		if (actionType == null || !ActionMap.mapping.containsKey(actionType)) {
			return new BaseState(false, AppInfo.INVALID_ACTION).toJSONString();
		}

		if (configManager == null || !configManager.valid()) {
			return new BaseState(false, AppInfo.CONFIG_ERROR).toJSONString();
		}

		State state = null;

		int actionCode = ActionMap.getType(actionType);

		Map<String, Object> conf = null;

		switch (actionCode) {

			case ActionMap.CONFIG:
				return configManager.getAllConfig().toString();

			case ActionMap.UPLOAD_IMAGE:
			case ActionMap.UPLOAD_SCRAWL:
			case ActionMap.UPLOAD_VIDEO:
			case ActionMap.UPLOAD_FILE:
				conf = configManager.getConfig(actionCode);
				state = new UeditorUploader(request, conf, ueditorService).doExec();
				break;

			case ActionMap.CATCH_IMAGE:
				conf = configManager.getConfig(actionCode);
				String[] list = request.getParameterValues((String) conf.get("fieldName"));
				state = new UeditorImageHunter(conf, ueditorService).capture(list);
				break;

			case ActionMap.LIST_IMAGE:
			case ActionMap.LIST_FILE:
				conf = configManager.getConfig(actionCode);
				int start = getStartIndex();
				state = new UeditorFileManager(conf, ueditorService).listFile(start);
				break;

		}

		return state.toJSONString();

	}

	public int getStartIndex() {

		String start = request.getParameter("start");

		try {
			return Integer.parseInt(start);
		} catch (Exception e) {
			return 0;
		}

	}

	/**
	 * callback参数验证
	 */
	public boolean validCallbackName(String name) {

		if (name.matches("^[a-zA-Z_]+[\\w0-9_]*$")) {
			return true;
		}

		return false;

	}

}
